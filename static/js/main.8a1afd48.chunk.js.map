{"version":3,"sources":["my_utils.js","firebase.js","secretStuff.js","components/gameComponent.js","components/mainComponent.js","App.js","reportWebVitals.js","index.js"],"names":["myUtils","s","e","arr","Array","from","i","size","indices","this","arrayFromRange","randCol","Math","floor","random","length","randInd1","splice","indexOf","randInd2","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","database","setHighScores","arrayOfColors","map","color","clicked","matched","ref","orderByChild","limitToFirst","on","snapshot","forEach","childSnapshot","push","val","undefined","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+RAAaA,EAAb,4FAQc,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,aARjF,2DACmBC,EAAGC,GAEd,IADA,IAAIC,EAAMC,MAAMC,KAAKH,EAAID,EAAI,GACpBK,EAAI,EAAGA,EAAIJ,EAAID,EAAI,EAAGK,IAC3BH,EAAIG,GAAKA,EAEb,OAAQH,IANhB,oCAUkBI,GACV,GAAGA,EAAK,IAAI,EACR,MAAO,GAGX,IAFA,IAAIC,EAAUC,KAAKC,eAAe,EAAEH,EAAK,GACrCJ,EAAMC,MAAMC,KAAKE,GACbD,EAAE,EAAEA,EAAEC,EAAK,EAAED,IACrB,CACI,IAAIK,EAAU,YAAAF,KAAA,MAAaG,KAAKC,MAAMD,KAAKE,SAAS,YAAAL,KAAA,MAAaM,SAC7DC,EAAWR,EAAQI,KAAKC,MAAMD,KAAKE,SAASN,EAAQO,SACxDP,EAAQS,OAAOT,EAAQU,QAAQF,GAAU,GACzC,IAAIG,EAAWX,EAAQI,KAAKC,MAAMD,KAAKE,SAASN,EAAQO,SACxDP,EAAQS,OAAOT,EAAQU,QAAQC,GAAU,GACzChB,EAAIa,GAAYb,EAAIgB,GAAYR,EAEpC,OAAOR,MAxBf,K,kBCMAiB,IAASC,cCNmB,CACxBC,OAAQ,0CACRC,WAAY,oCACZC,YAAa,2CACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBDDZ,IAAMC,EAAKV,IAASW,WEG3B,ICFIC,GDEU,IAAIhC,GAEYiC,cAAc,IAAIC,KAC5C,SAACC,GACG,MACI,CACIA,MAAOA,EACPC,SAAS,EACTC,SAAS,MCRzBP,EAAGQ,IAAI,eAAeC,aAAa,aAAaC,aAAa,IAAIC,GAAG,SAAQ,SAACC,GACzE,IAAIvC,EAAM,GACVuC,EAASC,SAAQ,SAACC,GACfzC,EAAI0C,KAAKD,EAAcE,eAEPC,IAAhBf,GAECA,EAAc7B,MCHP6C,ICFAC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCGdQ,IAASC,OACP,cAAC,IAAMC,WAAP,8DAGAC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8a1afd48.chunk.js","sourcesContent":["export class myUtils {\n    arrayFromRange(s, e) {\n        let arr = Array.from(e - s + 1);\n        for (let i = 0; i < e - s + 1; i++) {\n            arr[i] = i;\n        }\n        return (arr);\n    }\n    #colors = [\"#e61717\", \"#e6c717\", \"#90e617\", \"#17e6b9\", \"#1782e6\", \"#ab17e6\", \"#e61790\"]\n\n    arrayOfColors(size) {\n        if(size%2!==0)\n            return [];\n        let indices = this.arrayFromRange(0,size-1);\n        let arr = Array.from(size);\n        for(let i=0;i<size/2;i++)\n        {\n            let randCol = this.#colors[Math.floor(Math.random()*this.#colors.length)];\n            let randInd1 = indices[Math.floor(Math.random()*indices.length)];\n            indices.splice(indices.indexOf(randInd1),1);\n            let randInd2 = indices[Math.floor(Math.random()*indices.length)];\n            indices.splice(indices.indexOf(randInd2),1);\n            arr[randInd1] = arr[randInd2] = randCol;\n        }\n        return arr;\n    }\n};","import firebase from 'firebase/app';\nimport 'firebase/database';\n\nimport { firebaseConfig } from './secretStuff';\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\nexport const db = firebase.database();","export var firebaseConfig = {\n    apiKey: \"AIzaSyBbskd5ODwHgtNkzElhtDQSHdQfpn_YluM\",\n    authDomain: \"memory-game-aeb88.firebaseapp.com\",\n    databaseURL: \"https://memory-game-aeb88.firebaseio.com\",\n    projectId: \"memory-game-aeb88\",\n    storageBucket: \"memory-game-aeb88.appspot.com\",\n    messagingSenderId: \"480582403484\",\n    appId: \"1:480582403484:web:b498edbc0c34845ad53459\",\n    measurementId: \"G-1QCN87JF0G\"\n};","import React,{useState,useEffect} from 'react';\n\n\nimport {myUtils} from '../my_utils';\nimport SquareDisplay from './squareDisplayComponent';\nimport TopTenForm from './topTenFormComponent';\n\nimport {db} from '../firebase';\n\n\nconst utils = new myUtils();\n\nconst initalGameState = utils.arrayOfColors(12).map(\n    (color) => {\n        return(\n            {\n                color: color,\n                clicked: false,\n                matched: false\n            }\n        );\n    }\n);\n\n\n\nexport default function Game(props) {\n    const [squares,setSquares] = useState(initalGameState);\n    const [gameStatus,setGameStatus] = useState(\"not-started\");\n    const [timeElapsed,setTimeElapsed] = useState(0);\n    const [timeStart,setTimeStart] = useState(0);\n    const [timerId,setTimerId] = useState(0);\n    const [crackedTopTen,setCrackedTopTen] = useState(false);\n\n    useEffect(()=>{\n\n        const clickedSquares = []\n        for(let i=0;i<squares.length;i++)\n        {\n            if(squares[i].clicked)\n            {\n                clickedSquares.push({...squares[i],index: i});\n            }\n        }\n        if(clickedSquares.length === 2)\n        {\n            if(clickedSquares[0].color === clickedSquares[1].color)\n            {\n                const newState1 = [\n                ...squares.slice(0,clickedSquares[0].index).map( obj=> { return{...obj} }) ,\n                {\n                    color: squares[clickedSquares[0].index].color,\n                    clicked: false,\n                    matched: true\n                },\n                ...squares.slice(clickedSquares[0].index+1,clickedSquares[1].index).map( obj => { return({...obj}) } ),\n                {\n                    color: squares[clickedSquares[1].index].color,\n                    clicked: false,\n                    matched: true\n                },\n                ...squares.slice(clickedSquares[1].index+1,squares.length).map( obj => { return({...obj}) } )\n                ];\n                setTimeout(()=>{\n                    setSquares(newState1);\n                },500);\n                clickedSquares.length = 0;\n            }\n            else\n            {\n                const newState2 = [\n                    ...squares.slice(0,clickedSquares[0].index).map( obj=> { return{...obj} }) ,\n                    {\n                        color: squares[clickedSquares[0].index].color,\n                        clicked: false,\n                        matched: false\n                    },\n                    ...squares.slice(clickedSquares[0].index+1,clickedSquares[1].index).map( obj => { return({...obj}) } ),\n                    {\n                        color: squares[clickedSquares[1].index].color,\n                        clicked: false,\n                        matched: false\n                    },\n                    ...squares.slice(clickedSquares[1].index+1,squares.length).map( obj => { return({...obj}) } )\n                    ];\n                    setTimeout(()=>{\n                        setSquares(newState2);\n                    },500);\n                    clickedSquares.length = 0;\n            }\n        }\n    },[squares]);\n\n    useEffect(()=>{\n        if(gameStatus === \"started\")\n        {\n        const _timerId = setInterval(() => {\n            setTimeElapsed(Date.now()-timeStart);\n            }, 10);\n            setTimerId(_timerId);\n        }\n    },[gameStatus,timeStart])\n\n\n    const startTimer = () => {\n        setTimeStart(Date.now());\n    }\n\n\n    const stopTimer = () => {\n        clearInterval(timerId);\n    }\n\n\n    const startGame = () => {\n        startTimer();\n        setGameStatus(\"started\");\n    }\n\n\n    const clickHandler = (ind) => {\n        if(squares[ind].matched)\n        {\n            return;\n        }\n        if(squares[ind].clicked)\n        {\n            const newState = [...squares.slice(0,ind),{\n                color: squares[ind].color,\n                clicked: false,\n                matched: false\n            },...squares.slice(ind+1,squares.length)];\n            setSquares(newState);\n            return;\n        }\n        const newState = [...squares.slice(0,ind),{\n            color: squares[ind].color,\n            clicked: true,\n            matched: false\n        },...squares.slice(ind+1,squares.length)];\n        setSquares(newState);\n    }\n\n\n    const gameIsCompleted = squares.filter(square => !square.matched).length === 0;\n    let lowestScoreKey;\n    let numOfScores;\n\n\n\n    if(gameIsCompleted)\n    {\n            stopTimer();\n            db.ref(\"/timesTaken\").once(\"value\",snapshot=>{\n                numOfScores=snapshot.numChildren();\n                if(numOfScores === 10) {\n                    db.ref(\"/timesTaken\").orderByChild(\"timeTaken\").limitToLast(1).once(\"value\",snapshot=>{\n                        let lowestTime;\n                        snapshot.forEach((csnap)=>{\n                            lowestTime = csnap.val()[\"timeTaken\"];\n                            lowestScoreKey = csnap.key;\n                        })\n                        if(timeElapsed<lowestTime) {\n                            setCrackedTopTen(true);\n                            db.ref(`timesTaken/${lowestScoreKey}`).remove();\n                        }\n                        else {\n                            setCrackedTopTen(false);\n                        }\n                    })\n                }\n                else {\n                    setCrackedTopTen(true);\n                }\n        });\n\n    }\n\n    let centiseconds = (\"0\" + (Math.floor(timeElapsed / 10) % 100)).slice(-2);\n    let seconds = (\"0\" + (Math.floor(timeElapsed / 1000) % 60)).slice(-2);\n    let minutes = (\"0\" + (Math.floor(timeElapsed / 60000) % 60)).slice(-2);\n\n    return(\n        <>\n\n            {gameStatus === \"started\" && !gameIsCompleted ? <div className=\"timeDisplay\">{minutes} : {seconds} : {centiseconds}</div> : \"\"}\n            {gameStatus===\"not-started\" ? <div className=\"start-btn\">\n                                                <button onClick={startGame}>Start Game</button>\n                                            </div> : <></>}\n            {\n                gameIsCompleted ? ( crackedTopTen ? <><TopTenForm timeTaken = {timeElapsed}/> </>\n                    : <div className=\"sorry-text\">Sorry you did not crack the top ten <br/>You took {minutes} : {seconds} : {centiseconds} </div> ) : \n                                                            gameStatus === \"started\" ? \n                                                            <div className=\"game-wrapper\">\n                                                                <SquareDisplay \n                                                                timeElapsed = {timeElapsed}\n                                                                squares = {squares}\n                                                                clickHandler = {clickHandler}/>\n                                                            </div> \n                                                            : <></>\n            }\n        </>\n    );\n}","import React,{useState} from 'react';\n\n\nimport Header from './headerComponent';\nimport Game from './gameComponent';\nimport HighScores from './highScoresComponent';\n\nimport {db} from '../firebase';\nlet setHighScores;\n\ndb.ref(\"/timesTaken\").orderByChild(\"timeTaken\").limitToFirst(10).on(\"value\",(snapshot)=>{\n    let arr = [];\n    snapshot.forEach((childSnapshot)=>{\n       arr.push(childSnapshot.val());\n    });\n    if(setHighScores!==undefined)\n    {\n        setHighScores(arr);\n    }\n});\n\n\nexport default function Main(props) {\n\n    const highScoresHook = useState([]);\n    const highScores = highScoresHook[0];\n    setHighScores = highScoresHook[1];\n\n    return(\n        <>\n            <Header/>\n            <Game />\n            <HighScores highScores = {highScores} />\n        </>\n    );\n}","\n\nimport './App.css';\n\nimport Main from './components/mainComponent';\n\n\n\nfunction App() {\n    return (\n        <Main/>\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    Sorry for the inconvenience will resume shortly\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}