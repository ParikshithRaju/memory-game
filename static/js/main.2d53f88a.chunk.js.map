{"version":3,"sources":["components/headerComponent.js","my_utils.js","components/squareDisplayComponent.js","firebase.js","secretStuff.js","components/topTenFormComponent.js","components/gameComponent.js","components/mainComponent.js","components/highScoresComponent.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","className","myUtils","s","e","arr","Array","from","i","size","indices","this","arrayFromRange","randCol","Math","floor","random","length","randInd1","splice","indexOf","randInd2","Square","style","squareObj","matched","backgroundColor","clicked","color","onClick","id","SquareDisplay","squares","map","square","clickHandler","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","database","TopTenForm","centiseconds","timeTaken","slice","seconds","minutes","useState","name","setName","resetGame","onSubmit","ref","push","enterValueToDB","htmlFor","type","onChange","target","value","setHighScores","initalGameState","arrayOfColors","Game","setSquares","gameStatus","setGameStatus","timeElapsed","setTimeElapsed","timeStart","setTimeStart","timerId","setTimerId","crackedTopTen","setCrackedTopTen","useEffect","clickedSquares","index","newState1","obj","setTimeout","newState2","_timerId","setInterval","Date","now","lowestScoreKey","gameIsCompleted","filter","clearInterval","once","snapshot","numChildren","orderByChild","limitToLast","lowestTime","forEach","csnap","val","key","remove","ind","newState","HighScores","highScores","score","convertedTime","convertTime","Main","highScoresHook","gameId","setGameId","limitToFirst","on","childSnapshot","undefined","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2d53f88a.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Header(props) {\n    return(\n        <>\n            <h1 className=\"game-title\">\n                Memory Game\n            </h1>            \n            <h3 className=\"instructions\">\n                Match all the cards\n            </h3>            \n        </>\n    );\n}","export class myUtils {\n    arrayFromRange(s, e) {\n        let arr = Array.from(e - s + 1);\n        for (let i = 0; i < e - s + 1; i++) {\n            arr[i] = i;\n        }\n        return (arr);\n    }\n    #colors = [\"#e61717\", \"#e6c717\", \"#90e617\", \"#17e6b9\", \"#1782e6\", \"#ab17e6\", \"#e61790\"]\n\n    arrayOfColors(size) {\n        if(size%2!==0)\n            return [];\n        let indices = this.arrayFromRange(0,size-1);\n        let arr = Array.from(size);\n        for(let i=0;i<size/2;i++)\n        {\n            let randCol = this.#colors[Math.floor(Math.random()*this.#colors.length)];\n            let randInd1 = indices[Math.floor(Math.random()*indices.length)];\n            indices.splice(indices.indexOf(randInd1),1);\n            let randInd2 = indices[Math.floor(Math.random()*indices.length)];\n            indices.splice(indices.indexOf(randInd2),1);\n            arr[randInd1] = arr[randInd2] = randCol;\n        }\n        return arr;\n    }\n};","import React from 'react';\n\n\nfunction Square(props) {\n    return(\n    <button className=\"square\" \n    style={props.squareObj.matched ? {backgroundColor: 'gray'} : props.squareObj.clicked ? {backgroundColor: props.squareObj.color} : {}} \n    key={props.id}\n    onClick = {()=> props.onClick(props.id)}>\n    </button>\n    );\n}\n\n\nexport default function SquareDisplay(props) {\n\n    return(\n        <>\n            {\n                props.squares.map(\n                (square,i) => <Square squareObj={square} \n                                    id={i} \n                                    onClick={props.clickHandler}/>\n                )\n            }\n        </>\n    );\n}","import firebase from 'firebase/app';\nimport 'firebase/database';\n\nimport { firebaseConfig } from './secretStuff';\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\nexport const db = firebase.database();","export var firebaseConfig = {\n    apiKey: \"AIzaSyBbskd5ODwHgtNkzElhtDQSHdQfpn_YluM\",\n    authDomain: \"memory-game-aeb88.firebaseapp.com\",\n    databaseURL: \"https://memory-game-aeb88.firebaseio.com\",\n    projectId: \"memory-game-aeb88\",\n    storageBucket: \"memory-game-aeb88.appspot.com\",\n    messagingSenderId: \"480582403484\",\n    appId: \"1:480582403484:web:b498edbc0c34845ad53459\",\n    measurementId: \"G-1QCN87JF0G\"\n};","import React, { useState } from 'react';\n\nimport {db} from '../firebase';\n\n//props has the time taken by the player\n\nfunction enterValueToDB(name,timeTaken) {\n    db.ref(\"/timesTaken\").push({\n        name: name,\n        timeTaken: timeTaken\n    });\n}\n\nexport default function TopTenForm(props) {\n    let centiseconds = (\"0\" + (Math.floor(props.timeTaken / 10) % 100)).slice(-2);\n    let seconds = (\"0\" + (Math.floor(props.timeTaken / 1000) % 60)).slice(-2);\n    let minutes = (\"0\" + (Math.floor(props.timeTaken / 60000) % 60)).slice(-2);\n    const [name,setName] = useState('');\n    return(\n        <div className=\"input-form\">\n            Congrats you cracked the top ten <br/>You have taken {minutes} : {seconds} : {centiseconds}<br/> <div className=\"reset-btn\"><button onClick={props.resetGame}>Restart Game</button> </div><br/>\n            <form onSubmit={()=>{enterValueToDB(name,props.timeTaken)}}>\n                <label htmlFor=\"name\">\n                    Name:\n                </label>\n                <input  id=\"name\" type=\"text\" onChange={e=>{setName(e.target.value)}} value={name}></input>\n                <input type=\"submit\" value=\"submit\" />\n            </form>\n        </div>\n    );\n}","import React,{useState,useEffect} from 'react';\n\n\nimport {myUtils} from '../my_utils';\nimport SquareDisplay from './squareDisplayComponent';\nimport TopTenForm from './topTenFormComponent';\n\nimport {db} from '../firebase';\n\n\nconst utils = new myUtils();\n\nconst initalGameState = utils.arrayOfColors(12).map(\n    (color) => {\n        return(\n            {\n                color: color,\n                clicked: false,\n                matched: false\n            }\n        );\n    }\n);\n\n\nexport default function Game(props) {\n    const [squares,setSquares] = useState(initalGameState);\n    const [gameStatus,setGameStatus] = useState(\"not-started\");\n    const [timeElapsed,setTimeElapsed] = useState(0);\n    const [timeStart,setTimeStart] = useState(0);\n    const [timerId,setTimerId] = useState(0);\n    const [crackedTopTen,setCrackedTopTen] = useState(false);\n\n    useEffect(()=>{\n\n        const clickedSquares = []\n        for(let i=0;i<squares.length;i++)\n        {\n            if(squares[i].clicked)\n            {\n                clickedSquares.push({...squares[i],index: i});\n            }\n        }\n        if(clickedSquares.length === 2)\n        {\n            if(clickedSquares[0].color === clickedSquares[1].color)\n            {\n                const newState1 = [\n                ...squares.slice(0,clickedSquares[0].index).map( obj=> { return{...obj} }) ,\n                {\n                    color: squares[clickedSquares[0].index].color,\n                    clicked: false,\n                    matched: true\n                },\n                ...squares.slice(clickedSquares[0].index+1,clickedSquares[1].index).map( obj => { return({...obj}) } ),\n                {\n                    color: squares[clickedSquares[1].index].color,\n                    clicked: false,\n                    matched: true\n                },\n                ...squares.slice(clickedSquares[1].index+1,squares.length).map( obj => { return({...obj}) } )\n                ];\n                setTimeout(()=>{\n                    setSquares(newState1);\n                },500);\n                clickedSquares.length = 0;\n            }\n            else\n            {\n                const newState2 = [\n                    ...squares.slice(0,clickedSquares[0].index).map( obj=> { return{...obj} }) ,\n                    {\n                        color: squares[clickedSquares[0].index].color,\n                        clicked: false,\n                        matched: false\n                    },\n                    ...squares.slice(clickedSquares[0].index+1,clickedSquares[1].index).map( obj => { return({...obj}) } ),\n                    {\n                        color: squares[clickedSquares[1].index].color,\n                        clicked: false,\n                        matched: false\n                    },\n                    ...squares.slice(clickedSquares[1].index+1,squares.length).map( obj => { return({...obj}) } )\n                    ];\n                    setTimeout(()=>{\n                        setSquares(newState2);\n                    },500);\n                    clickedSquares.length = 0;\n            }\n        }\n    },[squares]);\n\n    useEffect(()=>{\n        if(gameStatus === \"started\")\n        {\n        const _timerId = setInterval(() => {\n            setTimeElapsed(Date.now()-timeStart);\n            }, 10);\n            setTimerId(_timerId);\n        }\n    },[gameStatus,timeStart])\n\n\n    const startTimer = () => {\n        setTimeStart(Date.now());\n    }\n\n\n    const stopTimer = () => {\n        clearInterval(timerId);\n    }\n\n\n    const startGame = () => {\n        startTimer();\n        setGameStatus(\"started\");\n    }\n\n\n    const clickHandler = (ind) => {\n        if(squares[ind].matched)\n        {\n            return;\n        }\n        if(squares[ind].clicked)\n        {\n            const newState = [...squares.slice(0,ind),{\n                color: squares[ind].color,\n                clicked: false,\n                matched: false\n            },...squares.slice(ind+1,squares.length)];\n            setSquares(newState);\n            return;\n        }\n        const newState = [...squares.slice(0,ind),{\n            color: squares[ind].color,\n            clicked: true,\n            matched: false\n        },...squares.slice(ind+1,squares.length)];\n        setSquares(newState);\n    }\n\n\n    const gameIsCompleted = squares.filter(square => !square.matched).length === 0;\n    let lowestScoreKey;\n    let numOfScores;\n\n\n\n    if(gameIsCompleted)\n    {\n            stopTimer();\n            db.ref(\"/timesTaken\").once(\"value\",snapshot=>{\n                numOfScores=snapshot.numChildren();\n                if(numOfScores >= 10) {\n                    db.ref(\"/timesTaken\").orderByChild(\"timeTaken\").limitToLast(1).once(\"value\",snapshot=>{\n                        let lowestTime;\n                        snapshot.forEach((csnap)=>{\n                            lowestTime = csnap.val()[\"timeTaken\"];\n                            lowestScoreKey = csnap.key;\n                        })\n                        if(timeElapsed<lowestTime) {\n                            setCrackedTopTen(true);\n                            db.ref(`timesTaken/${lowestScoreKey}`).remove();\n                        }\n                        else {\n                            setCrackedTopTen(false);\n                        }\n                    })\n                }\n                else {\n                    setCrackedTopTen(true);\n                }\n        });\n\n    }\n\n    let centiseconds = (\"0\" + (Math.floor(timeElapsed / 10) % 100)).slice(-2);\n    let seconds = (\"0\" + (Math.floor(timeElapsed / 1000) % 60)).slice(-2);\n    let minutes = (\"0\" + (Math.floor(timeElapsed / 60000) % 60)).slice(-2);\n\n    return(\n        <>\n\n            {gameStatus === \"started\" && !gameIsCompleted ? <div className=\"timeDisplay\">{minutes} : {seconds} : {centiseconds}</div> : \"\"}\n            {gameStatus===\"not-started\" ? <div className=\"start-btn\">\n                                                <button onClick={startGame}>Start Game</button>\n                                            </div> : <></>}\n            {\n                gameIsCompleted ? ( crackedTopTen ? <><TopTenForm timeTaken = {timeElapsed} resetGame = {props.resetGame}/> </>\n                    : <div className=\"sorry-text\">Sorry you did not crack the top ten <br/>You took {minutes} : {seconds} : {centiseconds} <br/><button onClick={props.resetGame}>Restart Game</button></div> ) : \n                                                            gameStatus === \"started\" ? \n                                                            <>\n                                                                <div className=\"game-wrapper\">\n                                                                    <SquareDisplay \n                                                                    timeElapsed = {timeElapsed}\n                                                                    squares = {squares}\n                                                                    clickHandler = {clickHandler}/>\n                                                                </div> \n                                                                <div className=\"reset-btn\">\n                                                                    <button onClick={props.resetGame}>Restart Game</button>\n                                                                </div>\n                                                            </>\n                                                            : <></>\n            }\n        </>\n    );\n}","import React,{useState} from 'react';\n\n\nimport Header from './headerComponent';\nimport Game from './gameComponent';\nimport HighScores from './highScoresComponent';\n\nimport {db} from '../firebase';\nlet setHighScores;\n\ndb.ref(\"/timesTaken\").orderByChild(\"timeTaken\").limitToFirst(10).on(\"value\",(snapshot)=>{\n    let arr = [];\n    snapshot.forEach((childSnapshot)=>{\n       arr.push(childSnapshot.val());\n    });\n    if(setHighScores!==undefined)\n    {\n        setHighScores(arr);\n    }\n});\n\n\nexport default function Main(props) {\n\n    const highScoresHook = useState([]);\n    const [gameId,setGameId] = useState(0);\n    const highScores = highScoresHook[0];\n    setHighScores = highScoresHook[1];\n\n    return(\n        <>\n            <Header/>\n            <Game key = {gameId} resetGame = {()=>{setGameId(gameId+1)}} />\n            <HighScores highScores = {highScores} />\n        </>\n    );\n}","import React from 'react';\n\n\n\nexport default function HighScores(props) {\n    const convertTime = (timeElapsed) => {\n        let centiseconds = (\"0\" + (Math.floor(timeElapsed / 10) % 100)).slice(-2);\n        let seconds = (\"0\" + (Math.floor(timeElapsed / 1000) % 60)).slice(-2);\n        let minutes = (\"0\" + (Math.floor(timeElapsed / 60000) % 60)).slice(-2);\n\n        return({\n            minutes,\n            seconds,\n            centiseconds\n        });\n    }\n    return(\n        <>\n            <h3>Top ten scores:</h3>\n            <ol>\n                {props.highScores.map((score,ind)=> {\n                    const convertedTime = convertTime(score.timeTaken);\n                    return(\n                    <li key={ind}><span className=\"score-name\">{score.name} = </span>{convertedTime.minutes} : {convertedTime.seconds} : {convertedTime.centiseconds}</li>\n                    );\n                })}\n            </ol>\n        </>\n    );\n}\n","\n\nimport './App.css';\n\nimport Main from './components/mainComponent';\n\n\n\nfunction App() {\n    return (\n        <Main/>\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}